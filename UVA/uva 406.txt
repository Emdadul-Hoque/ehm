#include<bits/stdc++.h>
using namespace std;

#define size_n 2000
#define size_p 2000

bool flag[size_n+5];
int primes[size_p+5];

void sieve()
{
    int i, j, total=1, val;

    for(i=2; i<=size_n; i++) flag[i]=1;

    val=sqrt(size_n)+1;

    for(i=2; i<val; i++)
    {
        if(flag[i])
        {
            for(j=i; j*i<=size_n; j++)
            {
                flag[i*j]=0;
            }
        }
    }

    primes[0]=1;

    for(i=2; i<=size_n; i++)
    {
        if(flag[i])
        {
            primes[total++]=i;
        }
    }
}

int main()
{
    int x, c, number, i, j, limited_primes[size_p+5];
    sieve();
    while((scanf("%d%d",&number,&c))==2)
    {
        j=0;
        for(i=0; primes[i]<=number; i++)
        {
            limited_primes[j++]=primes[i];
        }

        printf("%d %d: ",number,c);

        if((j%2)==0)
        {
            if(j<=2*c)
            {
                for(i=0; i<j; i++)
                {
                    printf("%d",limited_primes[i]);
                    if(i<j-1)
                        printf(" ");
                }
            }
            else
            {
                x=(j-2*c)/2;
                for(i=x; i<(j-x); i++)
                {
                    printf("%d",limited_primes[i]);
                    if(i<(j-x-1))
                        printf(" ");
                }
            }
        }
        else
        {
            if(j<=(2*c-1))
            {
                for(i=0; i<j; i++)
                {
                    printf("%d",limited_primes[i]);
                    if(i<j-1)
                        printf(" ");
                }
            }
            else
            {
                x=(j-(2*c-1))/2;
                for(i=x; i<(j-x); i++)
                {
                    printf("%d",limited_primes[i]);
                    if(i<(j-x-1))
                        printf(" ");
                }
            }
        }
        printf("\n\n");
    }
    return 0;
}
